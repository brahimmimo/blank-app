import streamlit as st
import pandas as pd
import plotly.express as px
import datetime

def main():
    st.title("Health Data Dashboard")
    
    # 1. Load data
    data = load_data()

    # 2. Display Dashboard
    display_dashboard(data)

    # 3. Generate Health Report
    if st.button("Generate Health Report"):
        generate_health_report(data)
        st.success("Health report generated successfully!")

    # 4. (Optional) Send Email
    if st.button("Send Email"):
        send_email_with_report()
        st.success("Email sent successfully!")

def load_data():
    # For demonstration, we create a random DataFrame.
    # Replace this with real data collection logic (from APIs, CSV, etc.)
    df = pd.DataFrame({
        'date': pd.date_range(start='2023-01-01', periods=30),
        'heart_rate': [60 + i for i in range(30)],  # dummy heart rate data
        'sleep_hours': [7 + (i % 3) for i in range(30)]  # dummy sleep hours
    })
    return df

def display_dashboard(data):
    st.subheader("Data Preview")
    st.write(data.head())  # Show first few rows

    st.subheader("Heart Rate over Time")
    fig_hr = px.line(data, x='date', y='heart_rate', title='Daily Heart Rate')
    st.plotly_chart(fig_hr)

    st.subheader("Sleep Hours over Time")
    fig_sleep = px.line(data, x='date', y='sleep_hours', title='Daily Sleep Hours')
    st.plotly_chart(fig_sleep)

def generate_health_report(data):
    """
    Placeholder for report generation logic.
    You can use libraries like fpdf or reportlab to generate PDFs.
    """
    # Example using a simple PDF generation approach:
    from fpdf import FPDF

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=14)

    pdf.cell(0, 10, txt="Health Report", ln=True, align='C')
    pdf.cell(0, 10, txt=f"Date: {datetime.date.today()}", ln=True, align='L')

    avg_heart_rate = data['heart_rate'].mean()
    avg_sleep = data['sleep_hours'].mean()

    pdf.cell(0, 10, txt=f"Average Heart Rate: {avg_heart_rate:.2f}", ln=True, align='L')
    pdf.cell(0, 10, txt=f"Average Sleep Hours: {avg_sleep:.2f}", ln=True, align='L')

    # Save PDF
    pdf.output("health_report.pdf")
    # You can also return this file path if needed

def send_email_with_report():
    """
    Simple function to send an email with the generated PDF attached.
    Uses yagmail for example, but you can use smtplib as well.
    """
    import yagmail

    # Fill with your actual email details
    sender_email = "your_email@gmail.com"
    app_password = "your_app_password"  # e.g., generated by Gmail for apps
    receiver_email = "receiver_email@gmail.com"

    yag = yagmail.SMTP(user=sender_email, password=app_password)
    subject = "Your Health Report"
    contents = ["Hello, here is your health report for today!"]

    # Attach the PDF
    attachments = ["health_report.pdf"]

    yag.send(to=receiver_email, subject=subject, contents=contents, attachments=attachments)

if __name__ == "__main__":
    main()
